package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class p5_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.AnnotationProcessor _jsp_annotationprocessor;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());
  }

  public void _jspDestroy() {
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\t\t<meta name=\"description\" content=\"jcf showcase\">\r\n");
      out.write("\t\t<meta name=\"author\" content=\"jcf\">\r\n");
      out.write("\t\t<title>JCF Showcase</title>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- Le styles -->\r\n");
      out.write("\t\t<link href=\"assets/bootstrap/css/bootstrap.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\t<link href=\"assets/bootstrap/css/bootstrap-responsive.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\t<link href=\"assets/bootstrap/css/docs.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\t<link href=\"assets/bootstrap/css/prettify.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"assets/css/jquery-ui-1.9.2.custom.css\" />\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 공통 lib-->\r\n");
      out.write("\t\t<script src=\"lib/jquery-1.9.0.js\"></script>\r\n");
      out.write("\t\t<script src=\"lib/jquery-ui-1.9.2.custom.js\"></script>\r\n");
      out.write("\t\t<script src=\"assets/bootstrap/js/bootstrap.js\"></script>\r\n");
      out.write("\t\t<script src=\"assets/bootstrap/js/prettify.js\"></script>\r\n");
      out.write("\t\t<script src=\"assets/bootstrap/js/application.js\"></script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body data-spy=\"scroll\" data-target=\".bs-docs-sidebar\">\r\n");
      out.write("\t\t<!-- Navbar -->\r\n");
      out.write("\t\t<div class=\"navbar navbar-inverse navbar-fixed-top\">\r\n");
      out.write("\t\t\t<div class=\"navbar-inner\">\r\n");
      out.write("\t\t\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\r\n");
      out.write("\t\t\t\t\t\t<span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span>\r\n");
      out.write("\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t<a class=\"brand\" href=\"/jcf-showcase/index.html\">JCF-Showcase</a>\r\n");
      out.write("\t\t\t\t\t<div class=\"nav-collapse collapse\">\r\n");
      out.write("\t\t\t\t\t\t<ul class=\"nav\">\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/index.html\">Home</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p1\">JCF SUA</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p2\">파일업로드/다운로드</a>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p3\">대용량조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p4\">예외 및 메시지처리</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"active\"><a href=\"/jcf-showcase/openpage.do?viewname=p5\">JCF Query </a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p6\">활용 CASE</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"#\">JCF-IAM(개발예정)</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li class=\"\"><a href=\"/jcf-showcase/openpage.do?viewname=p7\">YONG-DEV</a></li>\r\n");
      out.write("\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- Subhead -->\r\n");
      out.write("\t\t<header id=\"overview\"> </header>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t<!-- Docs nav -->\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"span3 bs-docs-sidebar\">\r\n");
      out.write("\t\t\t\t\t<ul class=\"nav nav-list bs-docs-sidenav\">\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#p51\"> <i class=\"icon-chevron-right\"></i>\r\n");
      out.write("\t\t\t\t\t\t\t\tJCF Query</a>\r\n");
      out.write("\t\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_1\">JavaBean 형태 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_2\">Map 형태 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_3\">int 형태 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_4\">JavaBean 형태의 리스트 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_5\">Map 형태의 리스트 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_6\">페이징  기반의 리스트 조회</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_7\">JavaBean 형태의 저장</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_8\">GridData 형태의 다건 저장</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t\t<li><a href=\"#p51_9\">다건 배치 업데이트</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t    <li><a href=\"#p51_10\">프로시저 호출하기</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t    <li><a href=\"#p51_11\">함수 호출하기</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"span9\">\r\n");
      out.write("\t\t\t\t<!-- Request Mapping= -->\r\n");
      out.write("\t\t\t\t\t<section id=\"p51\">\r\n");
      out.write("\t         \t\t\t<div class=\"page-header\">\r\n");
      out.write("\t\t\t\t\t\t\t<h3>JCF Query</h3>\r\n");
      out.write("\t\t\t\t\t\t\t<p>\r\n");
      out.write("\t\t\t\t\t\t\t\tJCF Query는 DB와 통신하는 데이터 엑세스 처리(DAO)로 본 문서에는 예제만 기술되어 있으며, 테스트 케이스를 통해 실행 및 테스트 해볼 수 있다.<br/>\r\n");
      out.write("\t\t\t\t\t\t\t\t관련코드는 com.jcf.sample.query 패키지이며, 테스트 케이스는 test 폴더 밑의 com.jcf.sample.query.QueryServiceTest 이다.<br/>\r\n");
      out.write("\t\t\t\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("&lt;!-- jcf-query 를 이용한 applicationContext-dao.xml 설정 --&gt;\r\n");
      out.write("&lt;jdbc:embedded-database id=\"dataSource\" type=\"HSQL\"&gt;\r\n");
      out.write("\t&lt;jdbc:script location=\"classpath:META-INF/db-script/hsql-sample-db-script.sql\"/&gt;\r\n");
      out.write("&lt;/jdbc:embedded-database&gt;\r\n");
      out.write("\r\n");
      out.write("&lt;bean id=\"sqlMapClientTemplate\" class=\"org.springframework.orm.ibatis.SqlMapClientTemplate\"&gt;\r\n");
      out.write("\t &lt;property name=\"sqlMapClient\" ref=\"sqlMapClient\" /&gt;\r\n");
      out.write("&lt;/bean&gt;\r\n");
      out.write("\r\n");
      out.write("&lt;jcfquery:query-config id=\"queryExecutor\" datasource=\"dataSource\" template-engine-type=\"IBATIS\" ibatis-sqlmap-client=\"sqlMapClient\" /&gt;\r\n");
      out.write("\r\n");
      out.write("&lt;bean id=\"sqlMapClient\" class=\"jcf.query.loader.SqlMapClientFactoryBean\"&gt;\r\n");
      out.write("\t&lt;property name=\"configLocation\" value=\"classpath:META-INF/ibatis/sqlmap-config.xml\" /&gt;\r\n");
      out.write("\t&lt;property name=\"mappingLocations\" value=\"classpath:com/jcf/**/sqlmap/*.xml\" /&gt;\r\n");
      out.write("\t&lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\r\n");
      out.write("&lt;/bean&gt;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_1\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>JavaBean 형태 조회</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>JavaBean 형태의 단건 데이터를 조회한다.</p>\r\n");
      out.write("\t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * &lt;T&gt; T queryForObject(Object statementTemplate, Object parameter, Class&lt;T&gt; clazz)\r\n");
      out.write(" */\r\n");
      out.write("public Sample getSampleByBean(Sample param) {\r\n");
      out.write("\treturn commonDao.queryForObject(\"sample.getSampleByModel\", param, Sample.class);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_2\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>Map 형태 조회</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>Map 형태의 단건 데이터를 조회한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * Map&lt;String, Object&gt; queryForMap(Object statementTemplate, Object parameter)\r\n");
      out.write(" */\r\n");
      out.write("public Map&lt;String, Object&gt; getSampleByMap(Map param) {\r\n");
      out.write("\tMap&lt;String, Object&gt; retValue = commonDao.queryForMap(\"sample.getSampleByMap\", param);\r\n");
      out.write("\treturn retValue;\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_3\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>int 형태 조회</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>int 형태의 데이터를 조회한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * Integer queryForInt(Object statementTemplate, Object parameter)\r\n");
      out.write(" */\r\n");
      out.write("public int getSampleByCount(Sample param) {\r\n");
      out.write("\treturn commonDao.queryForInt(\"sample.getSampleByInt\", param);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_4\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>JavaBean 형태의 리스트 조회</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>List &lt;JavaBean&gt; 형태의 데이터를 조회한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * &lt;T&gt; List&lt;T&gt; queryForList(Object statementTemplate, Object parameter, Class&lt;T&gt; clazz)\r\n");
      out.write(" */\r\n");
      out.write("public List&lt;Sample&gt; getSampleListByBean(Sample param) {\r\n");
      out.write("\treturn commonDao.queryForList(\"sample.getSampleByModel\", param, Sample.class);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_5\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>Map 형태의 리스트 조회 </h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>List&lt;Map&gt; 형태의 데이터를 조회한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * List&lt;Map&lt;String, Object&gt;&gt; queryForMapList(Object statementTemplate, Object parameter)\r\n");
      out.write(" */\r\n");
      out.write("public List&lt;Map&lt;String, Object&gt;&gt; getSampleListByMap(Map param) {\r\n");
      out.write("\treturn commonDao.queryForMapList(\"sample.getSampleByMap\", param);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_6\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>페이징 기반의 리스트 조회</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>skipRows 와 maxRows 에 따라 특정 로우 만큼 데이터를 조회한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("/**\r\n");
      out.write(" * &lt;T&gt; List&lt;T&gt; queryForList(Object statementTemplate, Object parameter, final int skipRows, final int maxRows, Class&lt;T&gt; clazz)\r\n");
      out.write(" * skipRows 현재 페이지가 보여지기 위해 skip 한 데이터 건수\r\n");
      out.write(" * maxRows 한 페이지에서 보여지는 최대 건수\r\n");
      out.write(" */\r\n");
      out.write("public List &lt;Sample&gt; getSampleListByPaging(Sample param, int skipRows, int maxRows) {\r\n");
      out.write("\treturn commonDao.queryForList(\"sample.getSampleByModel\", param, skipRows, maxRows, Sample.class);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_7\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>JavaBean 형태의 저장</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p> JavaBean 형태의 데이터를 저장한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * Integer update(Object statementTemplate, Object parameter)\r\n");
      out.write(" */\r\n");
      out.write("public int insertSample(Sample param) {\r\n");
      out.write("\treturn commonDao.update(\"sample.insertSample\", param);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_8\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>GridData 형태의 다건 저장</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>GridData 형태의 다건 데이터를 rowStatus 상태에 따라 입력, 수정, 삭제를 한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("/**\r\n");
      out.write(" * GridData&lt;E&gt; CRUD Example\r\n");
      out.write(" */\r\n");
      out.write("public void saveSampleList(GridData&lt;Sample&gt; gridData) {\r\n");
      out.write("\tthis.saveGridData(gridData);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("private &lt;E&gt; void saveGridData(GridData&lt;E&gt; gridData) {\r\n");
      out.write("\tgridData.forEachRow(new RowStatusCallback&lt;E&gt;() {\r\n");
      out.write("\r\n");
      out.write("\t\t@Override\r\n");
      out.write("\t\tpublic void insert(E record, int rowNum) {\r\n");
      out.write("\t\t\tcommonDao.update(\"sample.insertSample\", record);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t@Override\r\n");
      out.write("\t\tpublic void update(E record, E oldRecord, int rowNum) {\r\n");
      out.write("\t\t\tcommonDao.update(\"sample.updateSample\", record);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t@Override\r\n");
      out.write("\t\tpublic void delete(E record, int rowNum) {\r\n");
      out.write("\t\t\tcommonDao.update(\"sample.deleteSample\", record);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t@Override\r\n");
      out.write("\t\tpublic void normal(E arg0, int arg1) {\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_9\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>다건 배치 업데이트</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>배열 형태의 데이터를 받아 배치 업데이트를 한다.</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("public int[] updateSampleBatch(Sample[] param) {\r\n");
      out.write("\treturn commonDao.batchUpdate(\"sample.updateSample\", param);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_10\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>프로시저 호출하기</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>DBMS 프로시저를 호출한다.(Oracle경우 예)</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * Map&lt;String, Object&gt;  executeProcedure(String schema, String packageName, String procedureName, Object parameter)\r\n");
      out.write(" * @param param\r\n");
      out.write(" * @return\r\n");
      out.write(" */\r\n");
      out.write("public Map&lt;String, Object&gt; executeProcedure(Map param) {\r\n");
      out.write("\treturn commonDao.executeProcedure(\"SCHEMA\", \"PKG_NAME\", \"SP_NAME\", param);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t\t<section id=\"p51_11\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>함수 호출하기</h4>\r\n");
      out.write("\t\t\t\t\t\t\t<p>DBMS 함수를 호출한다.(Oracle경우 예)</p>\r\n");
      out.write(" \t\t\t\t\t\t\t<pre class=\"prettyprint linenums\">\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" * Map&lt;String, Object&gt;  executeFunction(String schema, String packageName, String functionName, Object parameter)\r\n");
      out.write(" */\r\n");
      out.write("public Map &lt;String, Object&gt; executeFunction(Map param) {\r\n");
      out.write("\treturn commonDao.executeFunction(\"SCHEMA\", \"PKG_NAME\", \"FUN_NAME\", param);\r\n");
      out.write("}\r\n");
      out.write("\t\t\t\t\t\t\t</pre>\r\n");
      out.write("\t\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t\t</section>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- Footer -->\r\n");
      out.write("\t\t<footer class=\"footer\">\r\n");
      out.write("\t\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t\t<p> Homepage : <a href=\"http://jcf.daewoobrenic.co.kr/blog/\">JCF Blog</a></p>\r\n");
      out.write("        \t\t<p>E-Mail : <a href=\"mailto:jcf@disc.co.kr\">jcf@disc.co.kr</a></p>\r\n");
      out.write("        \t\t<p>Copyright © 2013 Daewoo Information Systems Co., Ltd..</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</footer>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- Analytics -->\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\tvar _gauges = _gauges || [];\r\n");
      out.write("\t\t\t(function() {\r\n");
      out.write("\t\t\t\tvar t = document.createElement('script');\r\n");
      out.write("\t\t\t\tt.type = 'text/javascript';\r\n");
      out.write("\t\t\t\tt.async = true;\r\n");
      out.write("\t\t\t\tt.id = 'gauges-tracker';\r\n");
      out.write("\t\t\t\tt.setAttribute('data-site-id', '4f0dc9fef5a1f55508000013');\r\n");
      out.write("\t\t\t\tt.src = '//secure.gaug.es/track.js';\r\n");
      out.write("\t\t\t\tvar s = document.getElementsByTagName('script')[0];\r\n");
      out.write("\t\t\t\ts.parentNode.insertBefore(t, s);\r\n");
      out.write("\t\t\t})();\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>\r\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
